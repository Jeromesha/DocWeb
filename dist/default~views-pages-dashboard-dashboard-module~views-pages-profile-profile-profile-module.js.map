{"version":3,"sources":["./node_modules/@angular/material/__ivy_ngcc__/fesm2015/icon.js"],"names":["_c0","getMatIconNameNotFoundError","iconName","Error","getMatIconNoHttpProviderError","getMatIconFailedToSanitizeUrlError","url","getMatIconFailedToSanitizeLiteralError","literal","SvgIconConfig","svgText","options","MatIconRegistry","_httpClient","_sanitizer","document","_errorHandler","_svgIconConfigs","Map","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","_document","addSvgIconInNamespace","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","cleanLiteral","sanitize","SecurityContext","HTML","addSvgIconSetInNamespace","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","alias","className","set","get","safeUrl","RESOURCE_URL","cachedIcon","of","cloneSvg","_loadSvgIconFromConfig","pipe","tap","svg","map","name","key","iconKey","config","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","throwError","clear","_svgElementFromConfig","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","filter","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","errorMessage","message","handleError","forkJoin","foundIcon","i","length","indexOf","_extractSvgIconFromSet","_fetchIcon","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","nodeName","toLowerCase","_setSvgAttributes","_toSvgElement","_svgElementFromString","appendChild","str","div","createElement","innerHTML","element","attributes","value","setAttribute","childNodes","nodeType","ELEMENT_NODE","viewBox","iconConfig","_a","withCredentials","inProgressFetch","req","responseType","finalize","delete","share","configNamespace","push","svgElement","ɵfac","MatIconRegistry_Factory","t","ɵngcc0","ɵngcc1","ɵngcc2","DOCUMENT","ɵprov","ɵɵdefineInjectable","factory","ɵɵinject","HttpClient","DomSanitizer","ErrorHandler","token","providedIn","ctorParameters","type","decorators","Optional","undefined","Inject","args","ngDevMode","Injectable","ICON_REGISTRY_PROVIDER_FACTORY","parentRegistry","httpClient","sanitizer","errorHandler","ICON_REGISTRY_PROVIDER","provide","deps","SkipSelf","useFactory","MatIconBase","_elementRef","_MatIconMixinBase","mixinColor","MAT_ICON_LOCATION","InjectionToken","MAT_ICON_LOCATION_FACTORY","inject","_location","location","getPathname","pathname","search","funcIriAttributes","ɵ0","attr","funcIriAttributeSelector","join","funcIriPattern","MatIcon","elementRef","_iconRegistry","ariaHidden","_inline","_currentIconFetch","Subscription","EMPTY","nativeElement","inline","coerceBooleanProperty","_fontSet","_cleanupFontValue","_fontIcon","parts","split","changes","svgIconChanges","_svgNamespace","_svgName","unsubscribe","svgIcon","_splitIconName","getNamedSvgIcon","take","subscribe","_setSvgElement","previousValue","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","cachedElements","_elementsWithExternalReferences","size","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","textContent","path","_cacheChildrenWithExternalReferences","layoutElement","childCount","child","removeChild","elem","fontSetClass","fontSet","classNameForFontAlias","getDefaultFontSetClass","_previousFontSetClass","classList","remove","add","fontIcon","_previousFontIconClass","trim","elements","forEach","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","MatIcon_Factory","ɵcmp","selectors","hostAttrs","hostVars","hostBindings","MatIcon_HostBindings","rf","ctx","color","inputs","exportAs","features","ngContentSelectors","decls","vars","template","MatIcon_Template","styles","encapsulation","changeDetection","ElementRef","String","Attribute","propDecorators","Input","Component","selector","host","ViewEncapsulation","None","ChangeDetectionStrategy","OnPush","MatIconModule","MatIconModule_Factory","ɵmod","ɵinj","imports","MatCommonModule","ngJitMode","declarations","exports","NgModule"],"mappings":"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","file":"default~views-pages-dashboard-dashboard-module~views-pages-profile-profile-profile-module.js","sourcesContent":["import { SecurityContext, ɵɵdefineInjectable, ɵɵinject, ErrorHandler, Injectable, Optional, Inject, SkipSelf, InjectionToken, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Attribute, Input, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { of, throwError, forkJoin, Subscription } from 'rxjs';\nimport { tap, map, catchError, finalize, share, take } from 'rxjs/operators';\nimport { HttpClient } from '@angular/common/http';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\nimport * as ɵngcc2 from '@angular/platform-browser';\n\nconst _c0 = [\"*\"];\nfunction getMatIconNameNotFoundError(iconName) {\n    return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nfunction getMatIconNoHttpProviderError() {\n    return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n        'Please include the HttpClientModule from @angular/common/http in your ' +\n        'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeUrlError(url) {\n    return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n        `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n    return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n        `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n    constructor(url, svgText, options) {\n        this.url = url;\n        this.svgText = svgText;\n        this.options = options;\n    }\n}\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nclass MatIconRegistry {\n    constructor(_httpClient, _sanitizer, document, _errorHandler) {\n        this._httpClient = _httpClient;\n        this._sanitizer = _sanitizer;\n        this._errorHandler = _errorHandler;\n        /**\n         * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n         */\n        this._svgIconConfigs = new Map();\n        /**\n         * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n         * Multiple icon sets can be registered under the same namespace.\n         */\n        this._iconSetConfigs = new Map();\n        /** Cache for icons loaded by direct URLs. */\n        this._cachedIconsByUrl = new Map();\n        /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n        this._inProgressUrlFetches = new Map();\n        /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n        this._fontCssClassesByAlias = new Map();\n        /**\n         * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n         * The default 'material-icons' value assumes that the material icon font has been loaded as\n         * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n         */\n        this._defaultFontSetClass = 'material-icons';\n        this._document = document;\n    }\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIcon(iconName, url, options) {\n        return this.addSvgIconInNamespace('', iconName, url, options);\n    }\n    /**\n     * Registers an icon using an HTML string in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteral(iconName, literal, options) {\n        return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\n    }\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIconInNamespace(namespace, iconName, url, options) {\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon using an HTML string in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteralInNamespace(namespace, iconName, literal, options) {\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        // TODO: add an ngDevMode check\n        if (!cleanLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig('', cleanLiteral, options));\n    }\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @param url\n     */\n    addSvgIconSet(url, options) {\n        return this.addSvgIconSetInNamespace('', url, options);\n    }\n    /**\n     * Registers an icon set using an HTML string in the default namespace.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteral(literal, options) {\n        return this.addSvgIconSetLiteralInNamespace('', literal, options);\n    }\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param url\n     */\n    addSvgIconSetInNamespace(namespace, url, options) {\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon set using an HTML string in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteralInNamespace(namespace, literal, options) {\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        if (!cleanLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig('', cleanLiteral, options));\n    }\n    /**\n     * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the `<mat-icon>` element.\n     *\n     * @param alias Alias for the font.\n     * @param className Class name override to be used instead of the alias.\n     */\n    registerFontClassAlias(alias, className = alias) {\n        this._fontCssClassesByAlias.set(alias, className);\n        return this;\n    }\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     */\n    classNameForFontAlias(alias) {\n        return this._fontCssClassesByAlias.get(alias) || alias;\n    }\n    /**\n     * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     *\n     * @param className\n     */\n    setDefaultFontSetClass(className) {\n        this._defaultFontSetClass = className;\n        return this;\n    }\n    /**\n     * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     */\n    getDefaultFontSetClass() {\n        return this._defaultFontSetClass;\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param safeUrl URL from which to fetch the SVG icon.\n     */\n    getSvgIconFromUrl(safeUrl) {\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        const cachedIcon = this._cachedIconsByUrl.get(url);\n        if (cachedIcon) {\n            return of(cloneSvg(cachedIcon));\n        }\n        return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl, null)).pipe(tap(svg => this._cachedIconsByUrl.set(url, svg)), map(svg => cloneSvg(svg)));\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an error.\n     *\n     * @param name Name of the icon to be retrieved.\n     * @param namespace Namespace in which to look for the icon.\n     */\n    getNamedSvgIcon(name, namespace = '') {\n        // Return (copy of) cached icon if possible.\n        const key = iconKey(namespace, name);\n        const config = this._svgIconConfigs.get(key);\n        if (config) {\n            return this._getSvgFromConfig(config);\n        }\n        // See if we have any icon sets registered for the namespace.\n        const iconSetConfigs = this._iconSetConfigs.get(namespace);\n        if (iconSetConfigs) {\n            return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n        }\n        return throwError(getMatIconNameNotFoundError(key));\n    }\n    ngOnDestroy() {\n        this._svgIconConfigs.clear();\n        this._iconSetConfigs.clear();\n        this._cachedIconsByUrl.clear();\n    }\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     */\n    _getSvgFromConfig(config) {\n        if (config.svgText) {\n            // We already have the SVG element for this icon, return a copy.\n            return of(cloneSvg(this._svgElementFromConfig(config)));\n        }\n        else {\n            // Fetch the icon from the config's URL, cache it, and return a copy.\n            return this._loadSvgIconFromConfig(config).pipe(map(svg => cloneSvg(svg)));\n        }\n    }\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * an error if no icon with the specified name can be found.\n     */\n    _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n        // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n        // requested name.\n        const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n        if (namedIcon) {\n            // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n            // time anyway, there's probably not much advantage compared to just always extracting\n            // it from the icon set.\n            return of(namedIcon);\n        }\n        // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n        // fetched, fetch them now and look for iconName in the results.\n        const iconSetFetchRequests = iconSetConfigs\n            .filter(iconSetConfig => !iconSetConfig.svgText)\n            .map(iconSetConfig => {\n            return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError((err) => {\n                const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n                // Swallow errors fetching individual URLs so the\n                // combined Observable won't necessarily fail.\n                const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n                return of(null);\n            }));\n        });\n        // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n        // cached SVG element (unless the request failed), and we can check again for the icon.\n        return forkJoin(iconSetFetchRequests).pipe(map(() => {\n            const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n            // TODO: add an ngDevMode check\n            if (!foundIcon) {\n                throw getMatIconNameNotFoundError(name);\n            }\n            return foundIcon;\n        }));\n    }\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n        // Iterate backwards, so icon sets added later have precedence.\n        for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n            const config = iconSetConfigs[i];\n            // Parsing the icon set's text into an SVG element can be expensive. We can avoid some of\n            // the parsing by doing a quick check using `indexOf` to see if there's any chance for the\n            // icon to be in the set. This won't be 100% accurate, but it should help us avoid at least\n            // some of the parsing.\n            if (config.svgText && config.svgText.indexOf(iconName) > -1) {\n                const svg = this._svgElementFromConfig(config);\n                const foundIcon = this._extractSvgIconFromSet(svg, iconName, config.options);\n                if (foundIcon) {\n                    return foundIcon;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     */\n    _loadSvgIconFromConfig(config) {\n        return this._fetchIcon(config).pipe(tap(svgText => config.svgText = svgText), map(() => this._svgElementFromConfig(config)));\n    }\n    /**\n     * Loads the content of the icon set URL specified in the\n     * SvgIconConfig and attaches it to the config.\n     */\n    _loadSvgIconSetFromConfig(config) {\n        if (config.svgText) {\n            return of(null);\n        }\n        return this._fetchIcon(config).pipe(tap(svgText => config.svgText = svgText));\n    }\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractSvgIconFromSet(iconSet, iconName, options) {\n        // Use the `id=\"iconName\"` syntax in order to escape special\n        // characters in the ID (versus using the #iconName syntax).\n        const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n        if (!iconSource) {\n            return null;\n        }\n        // Clone the element and remove the ID to prevent multiple elements from being added\n        // to the page with the same ID.\n        const iconElement = iconSource.cloneNode(true);\n        iconElement.removeAttribute('id');\n        // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n        // the content of a new <svg> node.\n        if (iconElement.nodeName.toLowerCase() === 'svg') {\n            return this._setSvgAttributes(iconElement, options);\n        }\n        // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n        // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n        // tag is problematic on Firefox, because it needs to include the current page path.\n        if (iconElement.nodeName.toLowerCase() === 'symbol') {\n            return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n        }\n        // createElement('SVG') doesn't work as expected; the DOM ends up with\n        // the correct nodes, but the SVG content doesn't render. Instead we\n        // have to create an empty SVG node using innerHTML and append its content.\n        // Elements created using DOMParser.parseFromString have the same problem.\n        // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n        const svg = this._svgElementFromString('<svg></svg>');\n        // Clone the node so we don't remove it from the parent icon set element.\n        svg.appendChild(iconElement);\n        return this._setSvgAttributes(svg, options);\n    }\n    /**\n     * Creates a DOM element from the given SVG string.\n     */\n    _svgElementFromString(str) {\n        const div = this._document.createElement('DIV');\n        div.innerHTML = str;\n        const svg = div.querySelector('svg');\n        // TODO: add an ngDevMode check\n        if (!svg) {\n            throw Error('<svg> tag not found');\n        }\n        return svg;\n    }\n    /**\n     * Converts an element into an SVG node by cloning all of its children.\n     */\n    _toSvgElement(element) {\n        const svg = this._svgElementFromString('<svg></svg>');\n        const attributes = element.attributes;\n        // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n        for (let i = 0; i < attributes.length; i++) {\n            const { name, value } = attributes[i];\n            if (name !== 'id') {\n                svg.setAttribute(name, value);\n            }\n        }\n        for (let i = 0; i < element.childNodes.length; i++) {\n            if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n                svg.appendChild(element.childNodes[i].cloneNode(true));\n            }\n        }\n        return svg;\n    }\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     */\n    _setSvgAttributes(svg, options) {\n        svg.setAttribute('fit', '');\n        svg.setAttribute('height', '100%');\n        svg.setAttribute('width', '100%');\n        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n        if (options && options.viewBox) {\n            svg.setAttribute('viewBox', options.viewBox);\n        }\n        return svg;\n    }\n    /**\n     * Returns an Observable which produces the string contents of the given icon. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     */\n    _fetchIcon(iconConfig) {\n        var _a;\n        const { url: safeUrl, options } = iconConfig;\n        const withCredentials = (_a = options === null || options === void 0 ? void 0 : options.withCredentials) !== null && _a !== void 0 ? _a : false;\n        if (!this._httpClient) {\n            throw getMatIconNoHttpProviderError();\n        }\n        // TODO: add an ngDevMode check\n        if (safeUrl == null) {\n            throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n        }\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        // TODO: add an ngDevMode check\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n        // already a request in progress for that URL. It's necessary to call share() on the\n        // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n        const inProgressFetch = this._inProgressUrlFetches.get(url);\n        if (inProgressFetch) {\n            return inProgressFetch;\n        }\n        const req = this._httpClient.get(url, { responseType: 'text', withCredentials }).pipe(finalize(() => this._inProgressUrlFetches.delete(url)), share());\n        this._inProgressUrlFetches.set(url, req);\n        return req;\n    }\n    /**\n     * Registers an icon config by name in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param iconName Name under which to register the config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconConfig(namespace, iconName, config) {\n        this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n        return this;\n    }\n    /**\n     * Registers an icon set config in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconSetConfig(namespace, config) {\n        const configNamespace = this._iconSetConfigs.get(namespace);\n        if (configNamespace) {\n            configNamespace.push(config);\n        }\n        else {\n            this._iconSetConfigs.set(namespace, [config]);\n        }\n        return this;\n    }\n    /** Parses a config's text into an SVG element. */\n    _svgElementFromConfig(config) {\n        if (!config.svgElement) {\n            const svg = this._svgElementFromString(config.svgText);\n            this._setSvgAttributes(svg, config.options);\n            config.svgElement = svg;\n        }\n        return config.svgElement;\n    }\n}\nMatIconRegistry.ɵfac = function MatIconRegistry_Factory(t) { return new (t || MatIconRegistry)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient, 8), ɵngcc0.ɵɵinject(ɵngcc2.DomSanitizer), ɵngcc0.ɵɵinject(DOCUMENT, 8), ɵngcc0.ɵɵinject(ɵngcc0.ErrorHandler)); };\nMatIconRegistry.ɵprov = ɵɵdefineInjectable({ factory: function MatIconRegistry_Factory() { return new MatIconRegistry(ɵɵinject(HttpClient, 8), ɵɵinject(DomSanitizer), ɵɵinject(DOCUMENT, 8), ɵɵinject(ErrorHandler)); }, token: MatIconRegistry, providedIn: \"root\" });\nMatIconRegistry.ctorParameters = () => [\n    { type: HttpClient, decorators: [{ type: Optional }] },\n    { type: DomSanitizer },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: ErrorHandler }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatIconRegistry, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.HttpClient, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc2.DomSanitizer }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.ErrorHandler }]; }, null); })();\n/** @docs-private */\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, errorHandler, document) {\n    return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n/** @docs-private */\nconst ICON_REGISTRY_PROVIDER = {\n    // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n    provide: MatIconRegistry,\n    deps: [\n        [new Optional(), new SkipSelf(), MatIconRegistry],\n        [new Optional(), HttpClient],\n        DomSanitizer,\n        ErrorHandler,\n        [new Optional(), DOCUMENT],\n    ],\n    useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg) {\n    return svg.cloneNode(true);\n}\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace, name) {\n    return namespace + ':' + name;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nclass MatIconBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatIconMixinBase = mixinColor(MatIconBase);\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nconst MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n    providedIn: 'root',\n    factory: MAT_ICON_LOCATION_FACTORY\n});\n/** @docs-private */\nfunction MAT_ICON_LOCATION_FACTORY() {\n    const _document = inject(DOCUMENT);\n    const _location = _document ? _document.location : null;\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: () => _location ? (_location.pathname + _location.search) : ''\n    };\n}\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n    'clip-path',\n    'color-profile',\n    'src',\n    'cursor',\n    'fill',\n    'filter',\n    'marker',\n    'marker-start',\n    'marker-mid',\n    'marker-end',\n    'mask',\n    'stroke'\n];\nconst ɵ0 = attr => `[${attr}]`;\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(ɵ0).join(', ');\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\nclass MatIcon extends _MatIconMixinBase {\n    constructor(elementRef, _iconRegistry, ariaHidden, _location, _errorHandler) {\n        super(elementRef);\n        this._iconRegistry = _iconRegistry;\n        this._location = _location;\n        this._errorHandler = _errorHandler;\n        this._inline = false;\n        /** Subscription to the current in-progress SVG icon request. */\n        this._currentIconFetch = Subscription.EMPTY;\n        // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n        // the right thing to do for the majority of icon use-cases.\n        if (!ariaHidden) {\n            elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n        }\n    }\n    /**\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n     * the element the icon is contained in.\n     */\n    get inline() {\n        return this._inline;\n    }\n    set inline(inline) {\n        this._inline = coerceBooleanProperty(inline);\n    }\n    /** Font set that the icon is a part of. */\n    get fontSet() { return this._fontSet; }\n    set fontSet(value) {\n        this._fontSet = this._cleanupFontValue(value);\n    }\n    /** Name of an icon within a font set. */\n    get fontIcon() { return this._fontIcon; }\n    set fontIcon(value) {\n        this._fontIcon = this._cleanupFontValue(value);\n    }\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     */\n    _splitIconName(iconName) {\n        if (!iconName) {\n            return ['', ''];\n        }\n        const parts = iconName.split(':');\n        switch (parts.length) {\n            case 1: return ['', parts[0]]; // Use default namespace.\n            case 2: return parts;\n            default: throw Error(`Invalid icon name: \"${iconName}\"`); // TODO: add an ngDevMode check\n        }\n    }\n    ngOnChanges(changes) {\n        // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n        const svgIconChanges = changes['svgIcon'];\n        this._svgNamespace = null;\n        this._svgName = null;\n        if (svgIconChanges) {\n            this._currentIconFetch.unsubscribe();\n            if (this.svgIcon) {\n                const [namespace, iconName] = this._splitIconName(this.svgIcon);\n                if (namespace) {\n                    this._svgNamespace = namespace;\n                }\n                if (iconName) {\n                    this._svgName = iconName;\n                }\n                this._currentIconFetch = this._iconRegistry.getNamedSvgIcon(iconName, namespace)\n                    .pipe(take(1))\n                    .subscribe(svg => this._setSvgElement(svg), (err) => {\n                    const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\n                    this._errorHandler.handleError(new Error(errorMessage));\n                });\n            }\n            else if (svgIconChanges.previousValue) {\n                this._clearSvgElement();\n            }\n        }\n        if (this._usingFontIcon()) {\n            this._updateFontIconClasses();\n        }\n    }\n    ngOnInit() {\n        // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n        // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n        if (this._usingFontIcon()) {\n            this._updateFontIconClasses();\n        }\n    }\n    ngAfterViewChecked() {\n        const cachedElements = this._elementsWithExternalReferences;\n        if (cachedElements && cachedElements.size) {\n            const newPath = this._location.getPathname();\n            // We need to check whether the URL has changed on each change detection since\n            // the browser doesn't have an API that will let us react on link clicks and\n            // we can't depend on the Angular router. The references need to be updated,\n            // because while most browsers don't care whether the URL is correct after\n            // the first render, Safari will break if the user navigates to a different\n            // page and the SVG isn't re-rendered.\n            if (newPath !== this._previousPath) {\n                this._previousPath = newPath;\n                this._prependPathToReferences(newPath);\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._currentIconFetch.unsubscribe();\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n    }\n    _usingFontIcon() {\n        return !this.svgIcon;\n    }\n    _setSvgElement(svg) {\n        this._clearSvgElement();\n        // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n        // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n        // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n        const styleTags = svg.querySelectorAll('style');\n        for (let i = 0; i < styleTags.length; i++) {\n            styleTags[i].textContent += ' ';\n        }\n        // Note: we do this fix here, rather than the icon registry, because the\n        // references have to point to the URL at the time that the icon was created.\n        const path = this._location.getPathname();\n        this._previousPath = path;\n        this._cacheChildrenWithExternalReferences(svg);\n        this._prependPathToReferences(path);\n        this._elementRef.nativeElement.appendChild(svg);\n    }\n    _clearSvgElement() {\n        const layoutElement = this._elementRef.nativeElement;\n        let childCount = layoutElement.childNodes.length;\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n        // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n        // we can't use innerHTML, because IE will throw if the element has a data binding.\n        while (childCount--) {\n            const child = layoutElement.childNodes[childCount];\n            // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n            // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n                layoutElement.removeChild(child);\n            }\n        }\n    }\n    _updateFontIconClasses() {\n        if (!this._usingFontIcon()) {\n            return;\n        }\n        const elem = this._elementRef.nativeElement;\n        const fontSetClass = this.fontSet ?\n            this._iconRegistry.classNameForFontAlias(this.fontSet) :\n            this._iconRegistry.getDefaultFontSetClass();\n        if (fontSetClass != this._previousFontSetClass) {\n            if (this._previousFontSetClass) {\n                elem.classList.remove(this._previousFontSetClass);\n            }\n            if (fontSetClass) {\n                elem.classList.add(fontSetClass);\n            }\n            this._previousFontSetClass = fontSetClass;\n        }\n        if (this.fontIcon != this._previousFontIconClass) {\n            if (this._previousFontIconClass) {\n                elem.classList.remove(this._previousFontIconClass);\n            }\n            if (this.fontIcon) {\n                elem.classList.add(this.fontIcon);\n            }\n            this._previousFontIconClass = this.fontIcon;\n        }\n    }\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     */\n    _cleanupFontValue(value) {\n        return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n    }\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     */\n    _prependPathToReferences(path) {\n        const elements = this._elementsWithExternalReferences;\n        if (elements) {\n            elements.forEach((attrs, element) => {\n                attrs.forEach(attr => {\n                    element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n                });\n            });\n        }\n    }\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     */\n    _cacheChildrenWithExternalReferences(element) {\n        const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n        const elements = this._elementsWithExternalReferences =\n            this._elementsWithExternalReferences || new Map();\n        for (let i = 0; i < elementsWithFuncIri.length; i++) {\n            funcIriAttributes.forEach(attr => {\n                const elementWithReference = elementsWithFuncIri[i];\n                const value = elementWithReference.getAttribute(attr);\n                const match = value ? value.match(funcIriPattern) : null;\n                if (match) {\n                    let attributes = elements.get(elementWithReference);\n                    if (!attributes) {\n                        attributes = [];\n                        elements.set(elementWithReference, attributes);\n                    }\n                    attributes.push({ name: attr, value: match[1] });\n                }\n            });\n        }\n    }\n}\nMatIcon.ɵfac = function MatIcon_Factory(t) { return new (t || MatIcon)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatIconRegistry), ɵngcc0.ɵɵinjectAttribute('aria-hidden'), ɵngcc0.ɵɵdirectiveInject(MAT_ICON_LOCATION), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ErrorHandler)); };\nMatIcon.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatIcon, selectors: [[\"mat-icon\"]], hostAttrs: [\"role\", \"img\", 1, \"mat-icon\", \"notranslate\"], hostVars: 7, hostBindings: function MatIcon_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"data-mat-icon-type\", ctx._usingFontIcon() ? \"font\" : \"svg\")(\"data-mat-icon-name\", ctx._svgName || ctx.fontIcon)(\"data-mat-icon-namespace\", ctx._svgNamespace || ctx.fontSet);\n        ɵngcc0.ɵɵclassProp(\"mat-icon-inline\", ctx.inline)(\"mat-icon-no-color\", ctx.color !== \"primary\" && ctx.color !== \"accent\" && ctx.color !== \"warn\");\n    } }, inputs: { color: \"color\", inline: \"inline\", fontSet: \"fontSet\", fontIcon: \"fontIcon\", svgIcon: \"svgIcon\" }, exportAs: [\"matIcon\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function MatIcon_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n    } }, styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatIcon.ctorParameters = () => [\n    { type: ElementRef },\n    { type: MatIconRegistry },\n    { type: String, decorators: [{ type: Attribute, args: ['aria-hidden',] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_ICON_LOCATION,] }] },\n    { type: ErrorHandler }\n];\nMatIcon.propDecorators = {\n    inline: [{ type: Input }],\n    svgIcon: [{ type: Input }],\n    fontSet: [{ type: Input }],\n    fontIcon: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatIcon, [{\n        type: Component,\n        args: [{\n                template: '<ng-content></ng-content>',\n                selector: 'mat-icon',\n                exportAs: 'matIcon',\n                inputs: ['color'],\n                host: {\n                    'role': 'img',\n                    'class': 'mat-icon notranslate',\n                    '[attr.data-mat-icon-type]': '_usingFontIcon() ? \"font\" : \"svg\"',\n                    '[attr.data-mat-icon-name]': '_svgName || fontIcon',\n                    '[attr.data-mat-icon-namespace]': '_svgNamespace || fontSet',\n                    '[class.mat-icon-inline]': 'inline',\n                    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"'\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: MatIconRegistry }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['aria-hidden']\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_ICON_LOCATION]\n            }] }, { type: ɵngcc0.ErrorHandler }]; }, { inline: [{\n            type: Input\n        }], fontSet: [{\n            type: Input\n        }], fontIcon: [{\n            type: Input\n        }], svgIcon: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatIconModule {\n}\nMatIconModule.ɵfac = function MatIconModule_Factory(t) { return new (t || MatIconModule)(); };\nMatIconModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatIconModule });\nMatIconModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[MatCommonModule], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatIconModule, { declarations: function () { return [MatIcon]; }, imports: function () { return [MatCommonModule]; }, exports: function () { return [MatIcon, MatCommonModule]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatIconModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule],\n                exports: [MatIcon, MatCommonModule],\n                declarations: [MatIcon]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ICON_REGISTRY_PROVIDER, ICON_REGISTRY_PROVIDER_FACTORY, MAT_ICON_LOCATION, MAT_ICON_LOCATION_FACTORY, MatIcon, MatIconModule, MatIconRegistry, getMatIconFailedToSanitizeLiteralError, getMatIconFailedToSanitizeUrlError, getMatIconNameNotFoundError, getMatIconNoHttpProviderError, ɵ0 };\n\n//# sourceMappingURL=icon.js.map"],"sourceRoot":"webpack:///"}